import os
import re
import fitz  # PyMuPDF
from dotenv import load_dotenv
from openai import AsyncOpenAI

load_dotenv()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ---------------------------
# Language + market detection
# ---------------------------
def detect_language(text: str) -> str:
    """
    Very lightweight heuristic without extra deps:
    - If Cyrillic dominates -> 'uk' (treat as Ukrainian market target)
    - Else -> 'en'
    """
    if not text:
        return "en"

    cyr = len(re.findall(r"[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]", text))
    lat = len(re.findall(r"[A-Za-z]", text))

    # If any distinctly Ukrainian letters present, force 'uk'
    if re.search(r"[–Ü—ñ–á—ó–Ñ—î“ê“ë]", text):
        return "uk"

    if cyr > lat:
        return "uk"
    return "en"


def market_and_style(lang: str):
    """
    Returns (market_note, style_note, reply_language_note)
    - market_note: what market to optimize for
    - style_note: region-specific conventions
    - reply_language_note: instruction for output language
    """
    if lang == "uk":
        return (
            "–û—Ä—ñ—î–Ω—Ç—É–π—Å—è –Ω–∞ —Ä–∏–Ω–æ–∫ –ø—Ä–∞—Ü—ñ –£–∫—Ä–∞—ó–Ω–∏.",
            (
                "–í—Ä–∞—Ö–æ–≤—É–π –∑–≤–∏—á–Ω—ñ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ —Ä–µ–∑—é–º–µ (–º–æ–∂–µ –±—É—Ç–∏ 1‚Äì2 —Å—Ç–æ—Ä—ñ–Ω–∫–∏, "
                "–æ–±–µ—Ä–µ–∂–Ω–æ –∑ –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ –¥–∞–Ω–∏–º–∏; —Å—Ñ–æ–∫—É—Å—É–π—Å—è –Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è—Ö —ñ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –Ω–∞–≤–∏—á–∫–∞—Ö). "
                "–ü–æ—è—Å–Ω–∏, —è–∫ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ ATS-—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. "
                "–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–∑–Ω–∞—á, —è–∫ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç/—Ä–æ–∑–¥—ñ–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ—á—ñ–∫—É–≤–∞–Ω—å —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤ –≤ –£–∫—Ä–∞—ó–Ω—ñ."
            ),
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
        )
    else:
        return (
            "Target the United Kingdom job market.",
            (
                "Use UK CV conventions (no photo/date of birth, concise bullet points, UK spelling, "
                "ATS-friendly formatting, clear impact metrics). "
                "If appropriate, reference UK norms (e.g., responsibilities vs achievements, tailored skills)."
            ),
            "Respond in English (UK).",
        )


# ---------------------------
# File reading
# ---------------------------
def extract_text_from_file(file_path):
    if file_path.lower().endswith(".pdf"):
        with fitz.open(file_path) as doc:
            return "\n".join([page.get_text() for page in doc])
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()


# ---------------------------
# Helpers
# ---------------------------
def safe_take(s: str, max_chars: int = 120_000) -> str:
    """Simple guard to avoid extremely long inputs (keeps prompts snappy)."""
    if not s:
        return ""
    if len(s) <= max_chars:
        return s
    return s[:max_chars] + "\n\n[...truncated for processing...]"


async def _ask_gpt(prompt: str) -> str:
    resp = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return resp.choices[0].message.content.strip() if resp.choices else "‚ùå GPT did not return a valid response."


# ---------------------------
# üîç CV analysis
# ---------------------------
async def analyze_resume(file_path):
    content = safe_take(extract_text_from_file(file_path))
    lang = detect_language(content)
    market_note, style_note, reply_lang = market_and_style(lang)

    prompt = f"""
You are a professional career consultant with 10+ years of experience in HR and CV coaching.
{market_note}
{style_note}
{reply_lang}

Analyze the following resume as if the candidate is applying for a modern, competitive role.

Your tasks:
1) Give a clear overall impression (1‚Äì2 sentences).
2) Evaluate each section separately:
   - Summary/Profile (–ó–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)
   - Skills/Qualifications (–ö–ª—é—á–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏/–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è)
   - Experience (use metrics wherever possible) (–î–æ—Å–≤—ñ–¥)
   - Education (–û—Å–≤—ñ—Ç–∞)
   - Formatting & ATS-readiness (–§–æ—Ä–º–∞—Ç&–û—Ü—ñ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ)
3) For every issue, provide a concrete suggestion AND an improved wording the candidate can copy.
4) Finish with a one-paragraph ‚Äúideal rewritten summary‚Äù for this resume, aligned with the target market above.

CV:
{content}
"""
    return await _ask_gpt(prompt)


# ---------------------------
# üéØ CV and job match analysis
# ---------------------------
async def analyze_for_vacancy(vacancy_text, resume_text):
    vacancy_text = safe_take(vacancy_text)
    resume_text = safe_take(resume_text)

    lang = detect_language(resume_text or vacancy_text)
    market_note, style_note, reply_lang = market_and_style(lang)

    prompt = f"""
You're a senior recruiter helping a candidate tailor their CV for a specific job.
{market_note}
{style_note}
{reply_lang}

Below is a job description and the candidate‚Äôs current CV. Your job:
1) Identify key hard and soft skills from the vacancy (prioritize those relevant to the target market).
2) Map them to the candidate's experience (point to concrete evidence).
3) Write a new personalized profile paragraph the candidate can paste into their CV.
4) Provide 4‚Äì6 bullet points tailored to the vacancy for the Experience section (achievement-focused, ATS-friendly).
5) List unmet requirements and actionable ways to address them (certs, projects, learning paths).

üìå Job Vacancy:
{vacancy_text}

üìÑ Candidate's CV:
{resume_text}
"""
    return await _ask_gpt(prompt)


# ---------------------------
# üß† HR Expert Advice
# ---------------------------
async def give_hr_feedback(resume_text):
    resume_text = safe_take(resume_text)
    lang = detect_language(resume_text)
    market_note, style_note, reply_lang = market_and_style(lang)

    prompt = f"""
Imagine you're a senior HR specialist providing a deep consultation to improve this resume.
{market_note}
{style_note}
{reply_lang}

Provide a full audit under these sections:
1) Format & Layout
2) Tone & Wording
3) Achievements (metrics, results, impact)
4) Focus (relevance, clarity of message)
5) Suggestions (what to restructure, cut, or emphasize)

For each issue:
- Briefly explain why it matters for the {('UK' if lang=='en' else 'Ukrainian')} market
- Provide a concrete revision or rephrased example the candidate can paste

Finish with:
- A competitiveness score out of 10 (for the target market)
- A 3‚Äì5 line action plan for the next edit iteration

CV:
{resume_text}
"""
    return await _ask_gpt(prompt)


# ---------------------------
# üíå Generate Cover Letter
# ---------------------------
async def generate_cover_letter(vacancy_text, resume_text):
    vacancy_text = safe_take(vacancy_text)
    resume_text = safe_take(resume_text)

    lang = detect_language(resume_text or vacancy_text)
    market_note, style_note, reply_lang = market_and_style(lang)

    prompt = f"""
You are an expert in writing winning cover letters that blend personality and professionalism.
{market_note}
{style_note}
{reply_lang}

Write a tailored, job-specific cover letter based on:
- the job description
- the candidate‚Äôs resume
- the target company context (infer from vacancy if needed)

Structure:
1) Intro ‚Äî clear interest in role & company
2) Why this company ‚Äî values/mission/goals alignment (UK/UA market expectations as relevant)
3) Why this candidate ‚Äî 2‚Äì3 concrete, metric-backed achievements
4) Close ‚Äî enthusiasm + call to interview

Tone: confident, polite, modern.
Length: up to 300 words, clear paragraphs.

üìå Job Vacancy:
{vacancy_text}

üìÑ Candidate's CV:
{resume_text}
"""
    return await _ask_gpt(prompt)
