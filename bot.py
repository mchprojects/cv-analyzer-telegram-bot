import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from analyzer import (
    extract_text_from_file,
    analyze_resume,
    analyze_for_vacancy,
    give_hr_feedback,
    generate_cover_letter,
)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω —ñ–∑ .env
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_state = {}

# –ú–µ–Ω—é
markup = ReplyKeyboardMarkup(
    [["üìÑ –†–æ–∑–±—ñ—Ä —Ä–µ–∑—é–º–µ", "üéØ –ü—ñ–¥ –≤–∞–∫–∞–Ω—Å—ñ—é"], ["üß† –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", "üíå –°—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç"]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=markup
    )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑ –º–µ–Ω—é
async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, file_path: str = None, vacancy_text: str = None):
    mode = user_modes.get(update.effective_user.id)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–æ–±–∫–∏
    await update.message.reply_text("‚åõ –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 10‚Äì15 —Å–µ–∫—É–Ω–¥.")

    if text == "üìÑ –†–æ–∑–±—ñ—Ä —Ä–µ–∑—é–º–µ":
        user_state[user_id] = {"mode": "resume"}
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ —É PDF –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.", reply_markup=markup)
    elif text == "üéØ –ü—ñ–¥ –≤–∞–∫–∞–Ω—Å—ñ—é":
        user_state[user_id] = {"mode": "vacancy"}
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é (PDF –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º). –ü–æ—Ç—ñ–º –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ.", reply_markup=markup)
    elif text == "üß† –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è":
        user_state[user_id] = {"mode": "consult"}
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ –¥–ª—è HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.", reply_markup=markup)
    elif text == "üíå –°—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç":
        user_state[user_id] = {"mode": "cover"}
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é (PDF –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º). –ü–æ—Ç—ñ–º –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ.", reply_markup=markup)
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá", reply_markup=markup)
# –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        for chunk in split_text(result):
            await update.message.reply_text(chunk)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫ —Ñ–∞–π–ª-–∫–æ–Ω—Ç–µ–Ω—Ç—É
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    file_path = f"input_{update.message.message_id}.txt"
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(text)
    await process_input(update, context, file_path)

# –û–±—Ä–æ–±–∫–∞ PDF –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –∞–±–æ .txt")
        return

    file = await context.bot.get_file(document.file_id)
    file_path = f"{document.file_id}_{document.file_name}"
    await file.download_to_drive(file_path)

    await process_input(update, context, file_path)

# –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
async def process_input(update: Update, context: ContextTypes.DEFAULT_TYPE, file_path: str):
    user_id = update.effective_user.id
    mode = user_state.get(user_id, {}).get("mode")

    if not mode:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá", reply_markup=markup)
        return

    try:
        if mode == "resume":
            result = await analyze_resume(file_path)
        elif mode == "vacancy":
            if "vacancy" not in user_state[user_id]:
                user_state[user_id]["vacancy"] = file_path
                await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ.")
                return
            else:
                resume_path = file_path
                vacancy_path = user_state[user_id]["vacancy"]
                vacancy_text = extract_text_from_file(vacancy_path)
                resume_text = extract_text_from_file(resume_path)
                result = await analyze_for_vacancy(vacancy_text, resume_text)
                del user_state[user_id]["vacancy"]
        elif mode == "consult":
            resume_text = extract_text_from_file(file_path)
            result = await give_hr_feedback(resume_text)
        elif mode == "cover":
            if "vacancy" not in user_state[user_id]:
                user_state[user_id]["vacancy"] = file_path
                await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ä–µ–∑—é–º–µ.")
                return
            else:
                resume_path = file_path
                vacancy_path = user_state[user_id]["vacancy"]
                vacancy_text = extract_text_from_file(vacancy_path)
                resume_text = extract_text_from_file(resume_path)
                result = await generate_cover_letter(vacancy_text, resume_text)
                del user_state[user_id]["vacancy"]
        else:
            result = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá"

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö
        for chunk in split_text(result):
            await update.message.reply_text(chunk, reply_markup=markup)

    except Exception as e:
        await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", reply_markup=markup)

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É
def split_text(text, max_length=4000):
    lines = text.split('\n')
    chunks = []
    current = ""
    for line in lines:
        if len(current) + len(line) + 1 > max_length:
            chunks.append(current)
            current = line
        else:
            current += "\n" + line
    if current:
        chunks.append(current)
    return chunks

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.Document.PDF | filters.Document.TEXT, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
